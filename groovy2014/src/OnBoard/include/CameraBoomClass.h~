#include <ros/ros.h>
#include <ros/node_handle.h>
#include <Messages/CameraBoomMessage.h>
#include <Messages/CameraBoomStatus.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include "Actuator.h"

class CameraBoomClass{

private:
	int downPos, upPos;	

	Messages::CameraBoomStatus status;
	// Node Handler
	ros::NodeHandle nh;

	// Subscribers
	ros::Subscriber sub;

	// Publishers
	ros::Publisher statusPublisher;

public:

	CameraBoomClass(int downPosition, int upPosition, int velocity, int rank);

	Actuator* cameraBoom;

	void callBack(const Messages::CameraBoomMessage::ConstPtr& msg);

	void publishStatusMessage();

int main( int argc, char **argv){

	ros::init(argc,argv,"CameraBoom");
	ros::NodeHandle n;
	ros::Rate loop_rate(LOOPRATE);
	std::cout << "init successful" << std::endl;
	ArmClass *AC = new ArmClass( clawRank, clawMinPos, clawMaxPos, clawMaxVel, stickRank, stickMinPos, stickMaxPos, stickMaxVel, servoMaxOpenedPositions, servoMaxClosedPositions, servoMaxVels, thumbChannel, panChannel, tiltChannel, servoPath, boomMaxVel, boomAccel, boomDecel, boomMaxAmps, boomPath, armRotMaxVelM, armRotAccelM, armRotDecelM, armRotMaxVelA, armRotAccelA, armRotDecelA, armRotMaxAmps, armRotPath,  watchDog, servoWatchDog);
	int counter = 0;
	while(ros::ok()){
		if(counter%(PUBLISHRATE*LOOPRATE) == 0){
			AC->publishStatusMessage();
			counter = 0;
		}
		counter++;
		ros::spinOnce();
		loop_rate.sleep();
	}
	return 0;
}
};
