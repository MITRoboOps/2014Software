"""autogenerated by genpy from Messages/NavigationMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavigationMessage(genpy.Message):
  _md5sum = "4e2301b8681f5ff9954abd06b7c53650"
  _type = "Messages/NavigationMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 timeUp
int32 BLcurrent
int32 FLcurrent
int32 BRcurrent
int32 FRcurrent
int32 BLvel
int32 FLvel
int32 BRvel
int32 FRvel
int32 chargeUsed
int32 current
int32 voltage
int32 latitude
int32 longitude
int32 roll
int32 pitch
int32 yaw
int32 boomCurrent
int32 armRotCurrent
int32 thumbPosition
int32 clawPosition
int32 stickPosition
int32 boomPosition
int32 armRotPosition
int32 panPosition
int32 tiltPosition
int32 satilites
int32 CBoomPosition

"""
  __slots__ = ['timeUp','BLcurrent','FLcurrent','BRcurrent','FRcurrent','BLvel','FLvel','BRvel','FRvel','chargeUsed','current','voltage','latitude','longitude','roll','pitch','yaw','boomCurrent','armRotCurrent','thumbPosition','clawPosition','stickPosition','boomPosition','armRotPosition','panPosition','tiltPosition','satilites','CBoomPosition']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeUp,BLcurrent,FLcurrent,BRcurrent,FRcurrent,BLvel,FLvel,BRvel,FRvel,chargeUsed,current,voltage,latitude,longitude,roll,pitch,yaw,boomCurrent,armRotCurrent,thumbPosition,clawPosition,stickPosition,boomPosition,armRotPosition,panPosition,tiltPosition,satilites,CBoomPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavigationMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timeUp is None:
        self.timeUp = 0
      if self.BLcurrent is None:
        self.BLcurrent = 0
      if self.FLcurrent is None:
        self.FLcurrent = 0
      if self.BRcurrent is None:
        self.BRcurrent = 0
      if self.FRcurrent is None:
        self.FRcurrent = 0
      if self.BLvel is None:
        self.BLvel = 0
      if self.FLvel is None:
        self.FLvel = 0
      if self.BRvel is None:
        self.BRvel = 0
      if self.FRvel is None:
        self.FRvel = 0
      if self.chargeUsed is None:
        self.chargeUsed = 0
      if self.current is None:
        self.current = 0
      if self.voltage is None:
        self.voltage = 0
      if self.latitude is None:
        self.latitude = 0
      if self.longitude is None:
        self.longitude = 0
      if self.roll is None:
        self.roll = 0
      if self.pitch is None:
        self.pitch = 0
      if self.yaw is None:
        self.yaw = 0
      if self.boomCurrent is None:
        self.boomCurrent = 0
      if self.armRotCurrent is None:
        self.armRotCurrent = 0
      if self.thumbPosition is None:
        self.thumbPosition = 0
      if self.clawPosition is None:
        self.clawPosition = 0
      if self.stickPosition is None:
        self.stickPosition = 0
      if self.boomPosition is None:
        self.boomPosition = 0
      if self.armRotPosition is None:
        self.armRotPosition = 0
      if self.panPosition is None:
        self.panPosition = 0
      if self.tiltPosition is None:
        self.tiltPosition = 0
      if self.satilites is None:
        self.satilites = 0
      if self.CBoomPosition is None:
        self.CBoomPosition = 0
    else:
      self.timeUp = 0
      self.BLcurrent = 0
      self.FLcurrent = 0
      self.BRcurrent = 0
      self.FRcurrent = 0
      self.BLvel = 0
      self.FLvel = 0
      self.BRvel = 0
      self.FRvel = 0
      self.chargeUsed = 0
      self.current = 0
      self.voltage = 0
      self.latitude = 0
      self.longitude = 0
      self.roll = 0
      self.pitch = 0
      self.yaw = 0
      self.boomCurrent = 0
      self.armRotCurrent = 0
      self.thumbPosition = 0
      self.clawPosition = 0
      self.stickPosition = 0
      self.boomPosition = 0
      self.armRotPosition = 0
      self.panPosition = 0
      self.tiltPosition = 0
      self.satilites = 0
      self.CBoomPosition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_28i.pack(_x.timeUp, _x.BLcurrent, _x.FLcurrent, _x.BRcurrent, _x.FRcurrent, _x.BLvel, _x.FLvel, _x.BRvel, _x.FRvel, _x.chargeUsed, _x.current, _x.voltage, _x.latitude, _x.longitude, _x.roll, _x.pitch, _x.yaw, _x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition, _x.satilites, _x.CBoomPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.timeUp, _x.BLcurrent, _x.FLcurrent, _x.BRcurrent, _x.FRcurrent, _x.BLvel, _x.FLvel, _x.BRvel, _x.FRvel, _x.chargeUsed, _x.current, _x.voltage, _x.latitude, _x.longitude, _x.roll, _x.pitch, _x.yaw, _x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition, _x.satilites, _x.CBoomPosition,) = _struct_28i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_28i.pack(_x.timeUp, _x.BLcurrent, _x.FLcurrent, _x.BRcurrent, _x.FRcurrent, _x.BLvel, _x.FLvel, _x.BRvel, _x.FRvel, _x.chargeUsed, _x.current, _x.voltage, _x.latitude, _x.longitude, _x.roll, _x.pitch, _x.yaw, _x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition, _x.satilites, _x.CBoomPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.timeUp, _x.BLcurrent, _x.FLcurrent, _x.BRcurrent, _x.FRcurrent, _x.BLvel, _x.FLvel, _x.BRvel, _x.FRvel, _x.chargeUsed, _x.current, _x.voltage, _x.latitude, _x.longitude, _x.roll, _x.pitch, _x.yaw, _x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition, _x.satilites, _x.CBoomPosition,) = _struct_28i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_28i = struct.Struct("<28i")
