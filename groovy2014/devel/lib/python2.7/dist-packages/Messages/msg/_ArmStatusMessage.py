"""autogenerated by genpy from Messages/ArmStatusMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ArmStatusMessage(genpy.Message):
  _md5sum = "39dd7004df49d35f5a38291f8b4a5676"
  _type = "Messages/ArmStatusMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 boomCurrent
int32 armRotCurrent
int32 thumbPosition
int32 clawPosition
int32 stickPosition
int32 boomPosition
int32 armRotPosition
int32 panPosition
int32 tiltPosition

"""
  __slots__ = ['boomCurrent','armRotCurrent','thumbPosition','clawPosition','stickPosition','boomPosition','armRotPosition','panPosition','tiltPosition']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       boomCurrent,armRotCurrent,thumbPosition,clawPosition,stickPosition,boomPosition,armRotPosition,panPosition,tiltPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmStatusMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.boomCurrent is None:
        self.boomCurrent = 0
      if self.armRotCurrent is None:
        self.armRotCurrent = 0
      if self.thumbPosition is None:
        self.thumbPosition = 0
      if self.clawPosition is None:
        self.clawPosition = 0
      if self.stickPosition is None:
        self.stickPosition = 0
      if self.boomPosition is None:
        self.boomPosition = 0
      if self.armRotPosition is None:
        self.armRotPosition = 0
      if self.panPosition is None:
        self.panPosition = 0
      if self.tiltPosition is None:
        self.tiltPosition = 0
    else:
      self.boomCurrent = 0
      self.armRotCurrent = 0
      self.thumbPosition = 0
      self.clawPosition = 0
      self.stickPosition = 0
      self.boomPosition = 0
      self.armRotPosition = 0
      self.panPosition = 0
      self.tiltPosition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.boomCurrent, _x.armRotCurrent, _x.thumbPosition, _x.clawPosition, _x.stickPosition, _x.boomPosition, _x.armRotPosition, _x.panPosition, _x.tiltPosition,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9i = struct.Struct("<9i")
